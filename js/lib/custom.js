// Generated by CoffeeScript 1.12.7

/*
	Custom
	Last update: 2018/04/30

	Author:	Taigo Ito
	Site: https://tgco.jp
	Twitter: @taigoito
	Location: Tokyo
 */
var Gallery, Modal, MyEvent, Twins, Util,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

if (!(typeof history.pushState === "function")) {
  $('body').append('<p class="no-support">このWebページは現在ご利用のブラウザをサポートしていません。<br>最新のブラウザをインストールして再度ご来訪ください。</p>');
}

if ('ontouchend' in document && $(window).width() < 1024) {
  MyEvent = {
    isSupportTouch: true,
    touch: 'touchend',
    start: 'touchstart',
    move: 'touchmove',
    end: 'touchend',
    points: {
      x: 0,
      y: 0
    },
    isDragging: false
  };
} else {
  MyEvent = {
    isSupportTouch: false,
    touch: 'click',
    start: 'mousedown',
    move: 'mousemove',
    end: 'mouseup mouseout',
    points: {
      x: 0,
      y: 0
    },
    isDragging: false
  };
}

if ('onwheel' in document) {
  MyEvent.wheel = 'wheel';
} else {
  MyEvent.wheel = 'mousewheel';
}

Util = {
  transitionEnd: function($el) {
    var callback, dfd;
    dfd = new $.Deferred;
    callback = function() {
      dfd.resolve($el);
    };
    if (($el != null) && $el.length && ($el.css('transition') != null)) {
      $el.on('transitionend', callback);
      dfd.done(function() {
        $el.off('transitionend', callback);
      });
    } else {
      dfd.resolve();
    }
    return dfd;
  },
  animationEnd: function($el) {
    var callback, dfd;
    dfd = new $.Deferred;
    callback = function() {
      dfd.resolve($el);
    };
    if (($el != null) && $el.length && ($el.css('animation') != null)) {
      $el.on('animationend', callback);
      dfd.done(function() {
        $el.off('animationend', callback);
      });
    } else {
      dfd.resolve();
    }
    return dfd;
  }
};

$(document).on(MyEvent.touch, '[data-history="back"]', function() {
  history.back();
  return false;
});


/*
	Modal
	Last update: 2018/11/09
 */

Modal = (function() {
  function Modal(options) {
    var ref;
    if (options == null) {
      options = {};
    }
    this.$el = (ref = options.$el) != null ? ref : $(document);
    this.handleEvents();
  }

  Modal.prototype.handleEvents = function() {
    this.$el.on(MyEvent.touch, '[data-toggle="modal"]', (function(_this) {
      return function(el) {
        var $targetEl, $toggleEl;
        if ($(window).width() >= 1024) {
          $toggleEl = $(el.currentTarget);
          $targetEl = $($toggleEl.data('target'));
          _this.toggle($targetEl);
        }
        return false;
      };
    })(this));
  };

  Modal.prototype.toggle = function($targetEl) {
    var scrollbarWidth;
    if ($targetEl.hasClass('collapse')) {
      $targetEl.removeClass('collapse');
      scrollbarWidth = this.getScrollbarWidth();
      setTimeout(function() {
        //$('body').addClass('scroll-lock').css('padding-right', Math.floor(scrollbarWidth) + 'px');
        return $targetEl.addClass('show');
      }, 0);
    } else {
      Util.transitionEnd($targetEl.removeClass('show')).then(function() {
        //$('body').removeClass('scroll-lock').css('padding-right', '');
        return $targetEl.addClass('collapse');
      });
    }
  };

  Modal.prototype.getScrollbarWidth = function() {
    var scrollDiv, scrollbarWidth;
    scrollbarWidth = 0;
    if (document.body.clientWidth < window.innerWidth) {
      scrollDiv = document.createElement('div');
      scrollDiv.id = 'scrollbar-measure';
      document.body.appendChild(scrollDiv);
      scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
    }
    return scrollbarWidth;
  };

  return Modal;

})();


/*
	Gallery
	Last update: 2018/11/09
 */

Gallery = (function(superClass) {
  extend(Gallery, superClass);

  function Gallery(options) {
    if (options == null) {
      options = {};
    }
    this.$content = $('.gallery-content');
    this.currentIndex = 0;
    this.len = $(document).find('[data-index]').length;
    Gallery.__super__.constructor.call(this, options);
  }

  Gallery.prototype.handleEvents = function() {
    this.$el.on(MyEvent.touch, '[data-toggle="gallery"]', (function(_this) {
      return function(el) {
        var $targetEl, $toggleEl, src;
        if ($(window).width() >= 1024) {
          $toggleEl = $(el.currentTarget);
          $targetEl = $($toggleEl.data('target'));
          _this.currentIndex = $toggleEl.find('img').data('index');
          src = $toggleEl.attr('href');
          _this.toggle($targetEl, src);
        }
        return false;
      };
    })(this));
    this.$el.on(MyEvent.touch, '[data-toggle="prev"]', (function(_this) {
      return function(el) {
        _this.slide(_this.countChange(-1, _this.currentIndex, _this.len));
        return false;
      };
    })(this));
    this.$el.on(MyEvent.touch, '[data-toggle="next"]', (function(_this) {
      return function(el) {
        _this.slide(_this.countChange(1, _this.currentIndex, _this.len));
        return false;
      };
    })(this));
  };

  Gallery.prototype.toggle = function($targetEl, src) {
    var $img;
    if (src !== '#') {
      $img = $('<img>').addClass('img-fluid').attr('src', src);
      this.$content.append($img);
      this.$content.find('img:first').remove();
      this.$content.find('img:last').addClass('show');
    }
    Gallery.__super__.toggle.call(this, $targetEl);
  };

  Gallery.prototype.countChange = function(num, index, len) {
    return (num + index + len) % len;
  };

  Gallery.prototype.slide = function(index) {
    var $img, src;
    this.currentIndex = index;
    src = $(document).find('[data-index="' + index + '"]').attr('src');
    $img = $('<img>').addClass('img-fluid').attr('src', src);
    this.$content.append($img);
    return Util.animationEnd($img.addClass('enter')).done((function(_this) {
      return function() {
        _this.$content.find('img:first').remove();
        return _this.$content.find('img:last').removeClass('enter');
      };
    })(this));
  };

  return Gallery;

})(Modal);


/*
	Twins
	Last update: 2018/04/30
 */

Twins = (function() {
  function Twins(options) {
    var ref, ref1, ref2, ref3;
    if (options == null) {
      options = {};
    }
    this.urlChangeHandler = bind(this.urlChangeHandler, this);
    this.isPHP = (ref = options.isPHP) != null ? ref : false;
    this.ruteDir = (ref1 = options.ruteDir) != null ? ref1 : '/';
    this.pages = options.pages;
    this.hasTitle = (ref2 = options.hasTitle) != null ? ref2 : false;
    this.bfcache = (ref3 = options.bfcache) != null ? ref3 : false;
    if (this.hasTitle) {
      this.$pageEnter = $('#twins-title');
    }
    this.$inner = $('#twins-inner');
    this.$view = $('#twins-view');
    this.$more = $('#twins-more');
    this.$controller = $('#twins-controller');
    this.$menuOpen = $('#twins-controller-open');
    this.$menuClose = $('#twins-controller-close');
    this.$moreOpen = $('#twins-more-open');
    this.$moreClose = $('#twins-more-close');
    this.$pageToggle = $('#twins-page-toggle');
    this.currentHash = location.hash;
    this.currentUrl = location.pathname;
    this.currentIndex = this.getPageIndex(this.currentUrl);
    this.pageClass = this.getPageAttr(this.currentIndex, 'pageClass');
    this.events = this.getPageAttr(this.currentIndex, 'events');
    this.isMenuShown = false;
    if (this.hasTitle && this.currentIndex === 0) {
      location.hash = '';
      this.currentHash = location.hash;
    } else if (this.currentHash) {
      this.isMoreShown = true;
      this.toggleMore();
    } else {
      this.isMoreShown = false;
    }
    this.handleEvents();
  }

  Twins.prototype.handleEvents = function() {
    $(document).on(MyEvent.touch, '[data-location="flip"]', (function(_this) {
      return function(el) {
        var nextIndex, nextUrl;
        el.preventDefault();
        nextIndex = $(el.currentTarget).data('target');
        if (_this.currentIndex !== nextIndex) {
          if (_this.currentIndex) {
            nextUrl = '..' + _this.getPageUrl(nextIndex);
          } else {
            nextUrl = '.' + _this.getPageUrl(nextIndex);
          }
          history.pushState(null, null, nextUrl);
          _this.urlChangeHandler();
        }
        return false;
      };
    })(this)).on(MyEvent.touch, '[data-toggle="menu"]', (function(_this) {
      return function() {
        _this.toggleMenu();
        return false;
      };
    })(this)).on(MyEvent.touch, '[data-toggle="more"]', (function(_this) {
      return function() {
        if (_this.isMoreShown) {
          location.hash = '';
        } else {
          location.hash = 'more';
        }
        return false;
      };
    })(this));
    $(window).on('popstate', this.urlChangeHandler);
  };

  Twins.prototype.urlChangeHandler = function() {
    var dfd, nextHash, nextIndex, nextUrl;
    if (this.bfcache) {
      this.bfcache = false;
    } else {
      nextHash = location.hash;
      nextUrl = location.pathname;
      nextIndex = this.getPageIndex(nextUrl);
      this.events = this.getPageAttr(nextIndex, 'events');
      dfd = new $.Deferred().resolve();
      dfd.then((function(_this) {
        return function() {
          if (_this.currentHash || nextHash) {
            _this.currentHash = nextHash;
            return _this.toggleMore();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (_this.isMenuShown) {
            _this.hideMenuClose();
            return _this.hideMenu();
          } else if (_this.currentUrl !== nextUrl) {
            _this.hideMenuOpen();
            _this.hideMoreOpen();
            return _this.hidePageToggle();
          }
        };
      })(this)).then((function(_this) {
        return function() {
          if (_this.currentUrl !== nextUrl) {
            return _this.flip(nextUrl);
          }
        };
      })(this)).then((function(_this) {
        return function() {
          _this.currentUrl = nextUrl;
          _this.currentIndex = _this.getPageIndex(nextUrl);
          if (!_this.isMoreShown) {
            _this.showMenuOpen();
            _this.showMoreOpen();
            return _this.showPageToggle();
          }
        };
      })(this));
    }
  };

  Twins.prototype.getPageIndex = function(url) {
    var i, j, len1, page, ref, result;
    url = url.slice(this.ruteDir.length - 1);
    ref = this.pages;
    for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
      page = ref[i];
      if (url === page.url) {
        result = page.index;
        break;
      }
    }
    return result;
  };

  Twins.prototype.getPageUrl = function(index) {
    var i, j, len1, page, ref, result;
    ref = this.pages;
    for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
      page = ref[i];
      if (index === page.index) {
        result = page.url;
        break;
      }
    }
    return result;
  };

  Twins.prototype.getPageAttr = function(index, attr) {
    var i, j, len1, page, ref, result;
    ref = this.pages;
    for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
      page = ref[i];
      if (index === page.index) {
        result = page[attr];
        break;
      }
    }
    return result;
  };

  Twins.prototype.parseUrl = function(url) {
    if (this.isPHP) {
      return url + 'index.php';
    } else {
      return url + 'index.html';
    }
  };

  Twins.prototype.flip = function(nextUrl) {
    var currentIndex, dfd, href, isInverse, nextIndex, pageClass, reverse, toggle;
    currentIndex = this.getPageIndex(this.currentUrl);
    nextIndex = this.getPageIndex(nextUrl);
    nextUrl = this.parseUrl(nextUrl);
    toggle = this.getPageAttr(nextIndex, 'toggle');
    href = this.getPageAttr(nextIndex, 'href');
    pageClass = this.getPageAttr(nextIndex, 'pageClass');
    isInverse = this.getPageAttr(nextIndex, 'isInverse');
    if ((currentIndex < nextIndex && !(currentIndex === 0 && nextIndex === this.pages.length - 1)) || (currentIndex === this.pages.length - 1 && nextIndex === 0)) {
      reverse = false;
    } else {
      reverse = true;
    }
    dfd = new $.Deferred();
    $.ajax({
      url: nextUrl,
      dataType: 'html'
    }).done((function(_this) {
      return function(data) {
        var $content, $cover, $menu, $more;
        if (_this.pageClass) {
          $('body').removeClass(_this.pageClass);
        }
        if (pageClass) {
          $('body').addClass(pageClass);
        }
        _this.pageClass = pageClass;
        if (isInverse) {
          $('body').addClass('twins-inverse');
        } else {
          $('body').removeClass('twins-inverse');
        }
        $content = $(data).find('.twins-view-item');
        $more = $(data).find('.twins-more-item');
        $cover = $(data).find('.twins-controller-cover');
        $menu = $(data).find('.twins-controller-menu');
        $content.addClass('enter');
        if (reverse) {
          $content.addClass('reverse');
        }
        $cover.addClass('enter');
        if (reverse) {
          $cover.addClass('reverse');
        }
        _this.$view.prepend($content);
        _this.$controller.prepend($cover);
        _this.$controller.find('.twins-controller-cover[data-index="' + currentIndex + '"]').addClass('leave');
        if (reverse) {
          _this.$controller.find('.twins-controller-cover[data-index="' + currentIndex + '"]').addClass('reverse');
        }
        if (reverse) {
          _this.$view.find('.twins-view-item[data-index="' + currentIndex + '"]').addClass('reverse');
        }
        return Util.animationEnd(_this.$view.find('.twins-view-item[data-index="' + currentIndex + '"]').addClass('leave')).done(function() {
          $content.removeClass('enter');
          if (reverse) {
            $content.removeClass('reverse');
          }
          $cover.removeClass('enter');
          if (reverse) {
            $cover.removeClass('reverse');
          }
          _this.$view.find('.twins-view-item[data-index="' + currentIndex + '"]').remove();
          _this.$more.html($more);
          _this.$controller.find('.twins-controller-cover[data-index="' + currentIndex + '"]').remove();
          _this.$controller.find('.twins-controller-bar').html($menu);
          _this.$moreOpen.attr('data-toggle', toggle).attr('href', href);
          _this.$pageToggle.data('target', (nextIndex + 1) % _this.pages.length);
          return dfd.resolve();
        });
      };
    })(this));
    return dfd;
  };

  Twins.prototype.toggleMenuOpen = function() {
    var dfd;
    if (this.isMenuShown) {
      dfd = this.hideMenuClose();
      return dfd.done((function(_this) {
        return function() {
          return _this.showMenuOpen();
        };
      })(this));
    } else {
      dfd = this.hideMenuOpen();
      return dfd.done((function(_this) {
        return function() {
          return _this.showMenuClose();
        };
      })(this));
    }
  };

  Twins.prototype.showMenuOpen = function() {
    var $menuOpen;
    if (!this.hasTitle || this.currentIndex) {
      $menuOpen = this.$menuOpen;
    } else {
      $menuOpen = this.$pageEnter;
    }
    $menuOpen.removeClass('collapse');
    return Util.animationEnd($menuOpen.addClass('enter')).done(function() {
      return $menuOpen.removeClass('enter');
    });
  };

  Twins.prototype.hideMenuOpen = function() {
    var $menuOpen;
    if (!this.hasTitle || this.currentIndex) {
      $menuOpen = this.$menuOpen;
    } else {
      $menuOpen = this.$pageEnter;
    }
    return Util.animationEnd($menuOpen.addClass('leave')).done((function(_this) {
      return function() {
        $menuOpen.removeClass('leave');
        return $menuOpen.addClass('collapse');
      };
    })(this));
  };

  Twins.prototype.showMenuClose = function() {
    this.$menuClose.removeClass('collapse');
    return Util.animationEnd(this.$menuClose.addClass('enter')).done((function(_this) {
      return function() {
        return _this.$menuClose.removeClass('enter');
      };
    })(this));
  };

  Twins.prototype.hideMenuClose = function() {
    return Util.animationEnd(this.$menuClose.addClass('leave')).done((function(_this) {
      return function() {
        _this.$menuClose.removeClass('leave');
        return _this.$menuClose.addClass('collapse');
      };
    })(this));
  };

  Twins.prototype.toggleMenu = function() {
    if (this.isMenuShown) {
      this.toggleMenuOpen().done((function(_this) {
        return function() {
          _this.showMoreOpen();
          return _this.showPageToggle();
        };
      })(this));
      return this.hideMenu();
    } else {
      this.toggleMenuOpen();
      this.showMenu();
      this.hideMoreOpen();
      return this.hidePageToggle();
    }
  };

  Twins.prototype.showMenu = function() {
    this.isMenuShown = true;
    return Util.animationEnd(this.$controller.addClass('show-menu').addClass('enter')).done((function(_this) {
      return function() {
        return _this.$controller.removeClass('enter');
      };
    })(this));
  };

  Twins.prototype.hideMenu = function() {
    this.isMenuShown = false;
    return Util.animationEnd(this.$controller.addClass('leave')).done((function(_this) {
      return function() {
        return _this.$controller.removeClass('leave').removeClass('show-menu');
      };
    })(this));
  };

  Twins.prototype.toggleMore = function() {
    var dfd;
    dfd = new $.Deferred();
    if (!this.currentHash) {
      this.hideMoreClose();
      dfd = this.hideMore();
      return dfd.done((function(_this) {
        return function() {
          if (_this.events != null) {
            _this.events.destruct();
          }
          return _this.showMoreOpen();
        };
      })(this));
    } else {
      this.hideMoreOpen();
      dfd = this.showMore();
      return dfd.done((function(_this) {
        return function() {
          if (_this.events != null) {
            _this.events.construct();
          }
          return _this.showMoreClose();
        };
      })(this));
    }
  };

  Twins.prototype.showMoreOpen = function() {
    if (!this.hasTitle || this.currentIndex) {
      this.$moreOpen.removeClass('collapse');
      return Util.animationEnd(this.$moreOpen.addClass('enter')).done((function(_this) {
        return function() {
          return _this.$moreOpen.removeClass('enter');
        };
      })(this));
    }
  };

  Twins.prototype.hideMoreOpen = function() {
    if (!this.hasTitle || this.currentIndex) {
      return Util.animationEnd(this.$moreOpen.addClass('leave')).done((function(_this) {
        return function() {
          _this.$moreOpen.removeClass('leave');
          return _this.$moreOpen.addClass('collapse');
        };
      })(this));
    }
  };

  Twins.prototype.showMoreClose = function() {
    this.$moreClose.removeClass('collapse');
    return Util.animationEnd(this.$moreClose.addClass('enter')).done((function(_this) {
      return function() {
        return _this.$moreClose.removeClass('enter');
      };
    })(this));
  };

  Twins.prototype.hideMoreClose = function() {
    return Util.animationEnd(this.$moreClose.addClass('leave')).done((function(_this) {
      return function() {
        _this.$moreClose.removeClass('leave');
        return _this.$moreClose.addClass('collapse');
      };
    })(this));
  };

  Twins.prototype.showMore = function() {
    this.isMoreShown = true;
    this.hideMenuOpen();
    this.hidePageToggle();
    return Util.transitionEnd(this.$inner.addClass('show-more'));
  };

  Twins.prototype.hideMore = function() {
    this.isMoreShown = false;
    return Util.transitionEnd(this.$inner.removeClass('show-more')).done((function(_this) {
      return function() {
        _this.showMenuOpen();
        return _this.showPageToggle();
      };
    })(this));
  };

  Twins.prototype.showPageToggle = function() {
    if (!this.hasTitle || this.currentIndex) {
      this.$pageToggle.removeClass('collapse');
      return Util.animationEnd(this.$pageToggle.addClass('enter')).done((function(_this) {
        return function() {
          return _this.$pageToggle.removeClass('enter');
        };
      })(this));
    }
  };

  Twins.prototype.hidePageToggle = function() {
    if (!this.hasTitle || this.currentIndex) {
      return Util.animationEnd(this.$pageToggle.addClass('leave')).done((function(_this) {
        return function() {
          _this.$pageToggle.removeClass('leave');
          return _this.$pageToggle.addClass('collapse');
        };
      })(this));
    }
  };

  return Twins;

})();
